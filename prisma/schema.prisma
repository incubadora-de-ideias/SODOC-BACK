generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Documento {
  id                 String              @id @default(uuid())
  nome               String
  descricao          String?
  caminho            String
  data               DateTime?           @default(now())
  versoes_documentos VersaoDocumento[]
  acessos            AcessoDocumento[]
  tarefas_documentos TarefasDocumentos[]
}

model Tarefa {
  id                 String              @id @default(uuid())
  nome               String
  descricao          String?
  id_usuario         String
  created_at         DateTime?           @default(now())
  updated_at         DateTime            @updatedAt
  usuario            Usuario             @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  tarefas_documentos TarefasDocumentos[]
}

model TarefasDocumentos {
  id           String @id @default(uuid())
  id_tarefa    String
  id_documento String

  pedidos_revisao PedidoRevisao[]
  tarefa          Tarefa          @relation(fields: [id_tarefa], references: [id], onDelete: Cascade)
  documento       Documento       @relation(fields: [id_documento], references: [id], onDelete: Cascade)
}

model VersaoDocumento {
  id           String    @id @default(uuid())
  id_documento String
  id_usuario   String
  descricao    String
  caminho      String
  data_criacao DateTime  @default(now())
  documento    Documento @relation(fields: [id_documento], references: [id], onDelete: Cascade)
  usuario      Usuario   @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model AcessoDocumento {
  id           String  @id @default(uuid())
  id_usuario   String
  id_documento String
  aprova       Boolean @default(false)

  usuario   Usuario   @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  documento Documento @relation(fields: [id_documento], references: [id], onDelete: Cascade)
}

model Comentario {
  id         String   @id @default(uuid())
  id_usuario String
  texto      String
  criado_em  DateTime @default(now())
  id_revisor String

  revisor Revisor @relation(fields: [id_revisor], references: [id], onDelete: Cascade)
  usuario Usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model PedidoRevisao {
  id                     String    @id @default(uuid())
  id_usuario_solicitante String
  criado_em              DateTime? @default(now())
  id_tarefa_documentos   String

  revisores         Revisor[]
  solicitante       Usuario            @relation(fields: [id_usuario_solicitante], references: [id], onDelete: Cascade)
  TarefasDocumentos TarefasDocumentos? @relation(fields: [id_tarefa_documentos], references: [id])
}

model Grupo {
  id             String          @id @default(uuid())
  nome           String
  id_usuario     String
  usuario        Usuario         @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  usuarios_grupo UsuariosGrupo[]

  @@unique([nome, id_usuario])
}

model UsuariosGrupo {
  id         String   @id @default(uuid())
  id_usuario String
  id_grupo   String
  confirmado Boolean? @default(false)

  usuario Usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  grupo   Grupo   @relation(fields: [id_grupo], references: [id], onDelete: Cascade)

  @@unique([id_grupo, id_usuario])
}

model Usuario {
  id                 String            @id @default(uuid())
  nome               String
  telefone           String
  email              String            @unique
  n_bi               String            @unique
  password           String
  versoes_documentos VersaoDocumento[]
  usuario_grupos     UsuariosGrupo[]
  acesso_documentos  AcessoDocumento[]
  notificacoes       Notificacao[]
  grupos             Grupo[]
  tarefa             Tarefa[]
  Comentario         Comentario[]
  PedidoRevisao      PedidoRevisao[]
  Revisor            Revisor[]
}

model Revisor {
  id                String        @id @default(uuid())
  id_usuario        String
  id_pedido_revisao String
  data_aprovacao    DateTime?
  estado            EstadoRevisao @default(PENDENTE)
  aprovado          Boolean       @default(false)

  comentarios Comentario[]

  usuario        Usuario       @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  pedido_revisao PedidoRevisao @relation(fields: [id_pedido_revisao], references: [id], onDelete: Cascade)
}

model Notificacao {
  id         String             @id @default(uuid())
  id_usuario String
  titulo     String
  descricao  String
  data       DateTime?          @default(now())
  lida       Boolean?           @default(false)
  tipo       TipoNotificacao    @default(MENSAGEM)
  destino    DestinoNotificacao @default(INTERNO)

  usuario Usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

enum EstadoRevisao {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDO
}

enum TipoNotificacao {
  ALERTA
  PENDENTE
  SUCESSO
  MENSAGEM
  CONFIRMACAO
  REVISAO
}

enum DestinoNotificacao {
  INTERNO
  EXTERNO
}